<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Spectrum Archive Reader

Программа читает диски формата TR-DOS, CP/M, IS-DOS, а также кастомные форматы через драйвер fdrawcmd.sys (https://simonowen.com/fdrawcmd/).


Терминология

Обработанный сектор – сектор у которого была попытка чтения. Это либо успешно прочитанный сектор, либо bad-сектор.
Необработанный сектор – сектор у которого не было попыток чтения.
Bad-сектор – сектор у которого была попытка чтения, которая оказалась неуспешной.
NoHeader – сектор при чтении которого была ошибка свидетельствущая о том что не был найден его заголовок, либо была ошибка CRC в заголовке.
Good-сектор – успешно прочитанный сектор.
Нулевой сектор – Good-сектор содержащий одни нули. Для CP/M аналогом является сектор содержащий только байты 0xE5 и обозначающийся как Empty.
Битый сектор – Bad или NoHeader.


Поддерживаемые форматы образов:

•	TRD: Формат TRD не позволяет сохранять признак того что сектор битый. При сохранении bad-секторов в них записываются прочитанные с диска данные (всегда искаженные, как правило сильно). При чтении файла образа этого типа определить, что этот сектор битый, невозможно.
•	Modified TRD: формат файла образа аналогичный TRD, с заполнением битых секторов символом ‘B’ и необработанных секторов символом ‘N’. При сохранении в этом формате происходит потеря данных из bad секторов, но появляется возможность сохранить признак того что сектор битый. Расширение имеет такое же как и формат TRD. Идея заполнения битых секторов символом ‘B’ взята из программы WinTRD. При чтении такого формата этой программой сектора заполненные символом ‘B’ воспринимаются как битые, заполненные ‘N’ – как необработанные. Решение заполнять одним символом весь битый сектор является не совсем удачным, т.к. реальные данные иногда содержат сектора заполненные одним байтом, в том числе ‘B’ и ‘N’ (это случается в графике, чаще всего в области атрибутов, когда весь экран заполнен одним цветом). Но раз это используется другими, то решено использовать такой способ и здесь. Чтобы прочитать файл с расширеним .trd как Modified TRD, надо при открытии файла указать его типа как ‘Modified TRD’ (тогда сектора заполненные символом ‘B’ будут восприняты как bad).
•	KDI: формат сохранения дисков CP/M, аналогичный TRD. Битые и необработанные сектора заполняются байтом 0xE5.
•	FDI: формат позволяющий сохранять данные битых секторов вместе с признаком того что они битые. Необработанные сектора помечаются как bad. Данные сохраняются до последнего трека, у которого были попытки чтения, включительно. Нечитавшиеся треки не сохраняются.

У форматов TRD, Modified TRD и KDI образ сохраняется до последнего сектора, у которого была попытка чтения, включительно. Последние сектора, у которых не было попыток чтения, не сохраняются. Сохраняется минимум два трека: нулевой и первый, даже если первый трек не читался – это сделано чтобы файл мог быть прочитан в UnrealSpeccy, который выдает ошибку если TRD состоит только из нулевого трека.



Описание интерфейса

•	First Track – номер трека с которого будет производиться чтение.
•	Last Track – номер трека до которого будет производиться чтение. Сам этот трек читаться не будет. Эти параметры также обозначены графически в виде толстой черной черты над картой образа. Оба этих параметра можно задать с помощью выделения мышью на карте образа. Двойной клик по карте образа – установка с 0 до 172.
•	Read Side – читаемая сторона диска: верхняя, нижняя или обе. Влияет только на то какая сторона читается. Диск и образ всегда считаются двухсторонними.
•	Upper Side Head Parameter – параметр Head секторов с верхней стороны диска. Если этот параметр не угадать, то верхняя сторона не будет читаться (будут ошибки NoHeader). Autodetect - автоопределение.
•	Sector Read Attempts – количество попыток чтения сектора.
•	Data Rate - скорость передачи данных.
•	Read Mode - режим чтения. Standard - стандартный (чтение секторов последовательно с 1 по 16). Fast - быстрое чтение (определяется расположение секторов на треке и идет чтение в порядке расположения). В некоторых случаях быстрое чтение может быть медленнее чем стандартное, а на некоторых машинах и операционных системах оно не будет работать вообще и будет недоступно.
•	Drive – выбор дисковода.



Кнопки (вкладки TR-DOS, CP/M, IS-DOS):

•	New – создание образа. При создании указывается размер образа в треках и его имя. Образ также создается автоматически при запуске приложения.
•	Load – загрузка образа из файла.
•	Save – сохранить образ в файл.
•	Set Size – изменить размер образа в треках. При уменьшении размера лишние данные теряются. При увеличении – нет.
•	Merge – слияние образов. Указывается файл образа на диске, который будет слит с имеющимся в программе образом. В логе будет выведено количество добавленных good-секторов.
•	Show Catalogue – показ каталога образа.
•	Show Cat From Track – показ каталога с указанного трека образа. Были коммандеры которые сохраняли копию каталога на 160 или 162 трек, можно их просмотреть по этой кнопке.
•	Read Forward – чтение диска. Читаются только те сектора, которые не были до этого успешно прочитаны. Чтение идет от Track From до Track To (не включая его и при условии невыхода за пределы образа).
•	Read Backward - чтение диска в обратном направлении. В остальном аналогично Read Forward.
•	Read Random Sectors – случайное чтение отдельных секторов. Читаются только сектора которые еще не читались или оказались битыми. Выбираются только в пределах Track From и Track To и только на указанной стороне (либо на обоих).
•	Read Catalogue – чтение каталога TR-DOS (9 секторов) с диска и показ в отдельной форме. Данные не сохраняются, на имеющийся образ не влияют.
•	Abort – прекращение чтения. Реакция происходит не сразу, а с некоторой задержкой, связанной с ожиданием завершения текущей операции драйвером.

Вкладка Various:

•	Build Disk Table – построение таблицы дисков (trd-образов), с указанием их размера, количества bad-секторов, файлов и поврежденных файлов, а также общая статистика – сколько секторов прочитано, сколько битых. Сохраняется в виде HTML.
•	Build Maps – построение карт для указанных trd-образов, где отмечены хорошие, битые и нулевые сектора. Сохраняется как HTML.
•	Build Sector Content Maps – построение карт содержимого секторов для указанных trd-образов. Определяет исходники TASM4.0 (иногда выдавая ложноположительный результат), GENS и другие нетокенизированные ассемблеры, графику/музыку (не отличая одно от другого), текст, нулевые сектора и код.
•	Build Duplicate Maps – построение карт секторов-дубликатов. У меня были случаи когда сектор прочитывался из другого места диска, например вместо сектора 0 читался сектор 1, из-за чего происходило искажение данных, и драйвер никак не регистрировал ошибки, выдавая данные как валидные. Не помню чтобы такое было на реальном Спектруме, но на двух PC-контроллерах у меня такое встречалось минимум 7 раз из 280 000 секторов. Чтобы находить такие случаи я написал эту функцию, но она далеко неидеальна, т.к. оказалось что дублирование секторов это часто встречающаяся вещь даже на валидных данных. Строит она сектора которые по содержимому полностью совпадают друг с другом, находятся в пределах 16 секторов друг от друга и не идентифицируются как графика (у графики очень высокий процент дублей сам по себе), сохраняется как HTML.
•	Mark Sector As Unprocessed – маркировать сектор в образе как необработанный. После этого при чтении диска программа будет пытаться его прочитать. Сделал чтобы снова перечитать сектора-дубли в некоторых дисках.
•	Build File Table – построение таблиц файлов для указанных trd-образов. Поврежденные файлы отмечаются красным цветом, указывается количество bad-секторов у них. Сохраняется как HTML.
•	Driver Version – показывает версию установленного драйвера, тип контроллера и поддерживаемые скорости.



Вкладка HT:

Предназначена максимальной автоматизации чтения большого числа дисков. Чтение диска, вместе с сохранением образа и некоторыми проверками, делается нажатием одной клавиши: вставляем диск, нажимаем кнопку New Disk (F4), диск читается и сохраняется в директорию.
Конкретно по кнопке New Disk происходит следующее:

- Создается новый образ размером Default Image Size треков.
- Определяется формат нулевого трека (TR-DOS, IS-DOS, CP/M).
- Если формат определился, то делается чтение диска (если стоит галка напротив соответствующего формата) в режиме вперед-назад Number of Reads раз. Например, если Number of Reads равен 3, то диск будет прочитан вперед, потом назад, потом снова вперед (всего, таким образом, будет пройден 3 раза).
- После первого чтения вперед, происходит автоопределение размера диска. Определяется формат треков и их соответствие целевому. Изучаются треки которые имеют номер больше чем Default Image Size и меньше чем Max Tracks. Параметр Max Tracks зависит от дисковода, максимально допустимое число - 172. Default Image Size я думаю имеет смысл ставить равным 160 треков. Функцию автоопределения размера диска можно отключить установив Max Tracks равным Default Image Size.
- После выполнения чтения вперед-назад включается случайное чтение (если стоит соответствующая галка). К нему задается таймаут и количество error подряд при чтении секторов - для остановки чтения. 00:00:00 - отсутствие таймаута. Нулевое значение параметра Stop On Nth Fail означает отсутствие ограничения по количеству ошибочных чтений.
- Потом производится автоматическое сохранение образа в указанную директорию (для каждого типа диска своя) по указанному шаблону файла (для каждого типа диска свой). Шаблон задается задается именем файла и непрерывной последовательностью звездочек, которые будут заменены на порядковый номер. Число звездочек обозначает длину числа как строки. Например "Disk ***" будет записываться как Disk 000, Disk 001, и так далее. Расширение будет добавлено соответствующее выбранному формату файла. Формат файла также задается (FDI, TRD, Modified TRD, и KDI для CP/M).

Кнопка Repeat Reading - Заново запустить цикл чтения, но без создания нового образа, автоопределения типа диска и его размера.
Save - Сохранение образа. (Хотя он сохраняется автоматически, но можно это сделать еще раз. Будет сохранен в тот же файл что было сделано ранее автоматом.)



Вкладка Custom Format сделана для чтения кастомных форматов. Форматы, у которых все сектора имеют уникальные номера, должны читаться без особых проблем. Сектора с дублирующимися номерами могут не прочитываться. Читаются только правильно оформленные сектора, т.е. такие которые которые может видеть контроллер. Функционал этой вкладки сделан не до конца.


Существует проблема чтения первого сектора у некоторых дисков. Проявляется она как не найденный первый сектор (обозначенный синим цветом на карте) на всех треках. Решается закрытием индексного отверстия на диске. Закрытие индекcного отверстия несколько затрудняет работу программы в некоторых случаях и это может быть заметно (замедленная работа, лишние движения головки дисковода), но в целом работоспособность сохраняется (программа изначально писалась для дисковода с неработающим индексным датчиком).

На карте образа правой кнопкой можно вызвать контекстное меню, где есть функции маркировки секторов как необработанных.


Обсуждение:  https://zx-pk.ru/threads/31601-spectrum-archive-reader-programma-dlya-chteniya-tr-dos-diskov.html

Версия 1.0.0.16
7 августа 2022</value>
  </data>
</root>